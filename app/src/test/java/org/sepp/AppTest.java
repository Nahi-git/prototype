/*
 * This source file was generated by the Gradle 'init' task
 */
package org.sepp;

import static org.junit.Assert.assertTrue;

import java.util.Random;
import org.junit.Test;

public class AppTest {

  /*
   * @Test
   * public void DiffTest() {
   * throw new RuntimeException("Not implemented");
   * }
   */

  @Test
  public void serializationSymmetry() {

    for (int i = 0; i < 100; i++) {
      Config config = genRandomConfig();

      String serialized = config.serialize();
      Config deseralized = Config.deserialize(serialized);

      assertTrue(config.serialize().equals(deseralized.serialize()));
      assertTrue(config.equals(deseralized));
    }
  }

  @Test
  public void saveLoadConfig() {
    // delete existing configs
    for (int i = 0; i < 100; i++) {
      Config c1 = genRandomConfig();
      c1.name = "" + i;
      c1.save(true);

      Config c1l = null;
      try {
        c1l = Config.load(c1.name);
      } catch (Exception e) {
        // System.out.println("Failed");
        continue;
      }
      assertTrue(c1.equals(c1l));
    }
  }

  private static Config genRandomConfig() {
    Random rand = new Random();
    Config config = new Config(genRandomString(rand));
    int taskCount = rand.nextInt(11); // 0-10 tasks
    for (int i = 0; i < taskCount; i++) {
      config.addTask(genRandomTask(rand));
    }
    return config;
  }

  private static Task genRandomTask(Random rand) {
    Task.TaskType type;
    if (rand.nextInt() % 2 == 0) {
      type = Task.TaskType.CUSTOM;
    } else {
      type = Task.TaskType.COMPILE;
    }

    int lineCount = rand.nextInt(50) + 1;
    StringBuilder sb = new StringBuilder();

    for (int i = 0; i < lineCount; i++) {
      sb.append(genRandomString(rand));
      sb.append("\n");
    }

    return new Task(type, sb.toString());
  }

  private static String genRandomString(Random rand) {
    // string with 10-20 characters
    int lineLen = rand.nextInt(11) + 10;
    StringBuilder sb = new StringBuilder(lineLen);
    for (int i = 0; i < lineLen; i++) {
      // generate random character with code 48-127
      char c = (char) (rand.nextInt(80) + 48);
      sb.append(c);
    }

    return sb.toString();
  }

}
